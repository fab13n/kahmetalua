<?xml version="1.0" encoding="UTF-8"?>
<project name="Kahlua" basedir="." default="all">
        <property file="local.properties" />

        <property name="luac.path" value="luac" />
        <property name="emma.dir" value="/usr/share/java" />

        <property name="src.dir"       value="${basedir}/src"/>
        <property name="build.dir"     value="${basedir}/bin"/>
        <property name="classes.dir"     value="${build.dir}/classes"/>

        <property name="test.dir"       value="${basedir}/testsuite"/>
        <property name="test.src.dir"       value="${test.dir}/src"/>
        <property name="test.build.dir"     value="${test.dir}/bin"/>
        <property name="test.classes.dir"     value="${test.build.dir}/classes"/>
        <property name="test.lua.output.dir"     value="${test.build.dir}/lua"/>
        <property name="test.lua.input.dir"     value="${test.dir}/lua"/>
        <property name="test.emma.coverage.dir"     value="${test.dir}/coverage"/>

        <path id="main.dependencies">
                <pathelement location="${basedir}/lib/cldcapi11.jar" />
        </path>

        <path id="main.classpath">
                <pathelement path="${classes.dir}"/>
        </path>

        <path id="test.classpath">
                <path refid="main.classpath" />
                <pathelement path="${test.classes.dir}"/>
        </path>

        <path id="emma.lib" >
                <pathelement location="${emma.dir}/emma.jar" />
                <pathelement location="${emma.dir}/emma_ant.jar" />
        </path>
        <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

        <!-- Main targets -->
        <target name="all" depends="package, emma" />
        
        <target name="clean" description="Removes old build files">
                <delete dir="${build.dir}" failonerror="false"/>
                <delete dir="${test.build.dir}" failonerror="false"/>
                <delete dir="${test.classes.dir}" failonerror="false"/>
        </target>

        <target name="setup">
                <mkdir dir="${build.dir}"/>
                <mkdir dir="${classes.dir}"/>

                <mkdir dir="${test.build.dir}"/>
                <mkdir dir="${test.classes.dir}"/>
                <mkdir dir="${test.lua.output.dir}"/>
        </target>

        <target name="compile" depends="setup, compile-main-lua, compile-cldc, compile-j2se" description="Compiles Kahlua">
        </target>
        
        <target name="compile-cldc" unless="j2se">
                <javac
                        destdir="${classes.dir}"
                        debug="true"
                        target="1.4"
                        source="1.4"
                        classpathref="main.dependencies"
                >
                        <compilerarg value="-bootclasspath" />
                        <compilerarg value="" />

                        <src path="${src.dir}"/>
                </javac>
        </target>

        <target name="compile-j2se" if="j2se">
                <javac
                        destdir="${classes.dir}"
                        debug="true"
                        classpathref="main.dependencies"
                >
                        <src path="${src.dir}"/>
                </javac>
        </target>

        <target name="compile-main-lua" depends="setup" description="Compile main lua files">
                <apply executable="${luac.path}" dest="${classes.dir}" dir="${basedir}/resources" failonerror="true">
                        <arg value="-o" />
                        <targetfile />
                        <srcfile />
                        <fileset dir="${basedir}/resources" includes="*.lua" />
                        <mapper type="glob" from="*.lua" to="*.lbc"/>
                </apply>
        </target>


    <target name="package" depends="setup, compile" description="Package the final kahlua jar">
        <jar jarfile="${build.dir}/kahlua.jar">
                <fileset dir="${classes.dir}" />
        </jar>
    </target>

        <target name="release" depends="setup" description="Create a release zip">
                <tstamp />
                <zip zipfile="${build.dir}/kahlua-release-${DSTAMP}.zip">
                        <fileset dir="${basedir}">
                                <include name="build.xml" />
                                
                                <include name="resources/**" />
                                <include name="lib/**" />
                                <include name="docs/**" />
                                <include name="src/**" />

                                <include name="testsuite/**" />
                                <exclude name="testsuite/bin/**" />
                                <exclude name="testsuite/coverage/**" />

                                <include name="contrib/annotation/**" />
                                <exclude name="contrib/annotation/bin/**" />

                                <include name="contrib/JavaLuac/include/**" />
                                <include name="contrib/JavaLuac/jni_src/**" />
                                <include name="contrib/JavaLuac/src/**" />
                                
                                <include name="contrib/midlet/resources/**" />
                                <include name="contrib/midlet/src/**" />
                                <include name="contrib/midlet/build.xml" />
                                
                                <exclude name="**/.svn/**" />
                        </fileset>
                </zip>
        </target>

        <!-- Test stuff -->
        <target name="compile-test" depends="setup, compile" description="Compile test classes">
                <javac
                        destdir="${test.classes.dir}"
                        debug="true"
                        target="1.5"
                        source="1.5"
                        classpathref="main.classpath"
                >
                        <src path="${test.src.dir}"/>
                </javac>
        </target>

        <target name="compile-test-lua" depends="setup" description="Compile test lua files">
                <apply executable="${luac.path}" dest="${test.lua.output.dir}" dir="${test.lua.input.dir}" failonerror="true" verbose="true">
                        <arg value="-o" />
                        <targetfile />
                        <srcfile />
                        <fileset dir="${test.lua.input.dir}" includes="*.lua" />
                        <mapper type="glob" from="*.lua" to="*.lbc"/>
                </apply>
                <move file="${test.lua.output.dir}/testhelper.lbc" todir="${test.classes.dir}" />
        </target>

    <target name="test-depend" depends="setup, compile, compile-test, compile-test-lua">
    </target>

    <target name="run-test" depends="test-depend" description="Run the test-suite">
                <property name="test.file" value="" />
                <java classname="Test" classpathref="test.classpath" fork="true" dir="${basedir}">
                        <arg value="${test.lua.output.dir}" />
                        <arg value="${test.file}" />
                </java>
    </target>

        <target name="clean-emma">
                <delete dir="${test.emma.coverage.dir}" />
        </target>

        <target name="emma" depends="clean-emma, test-depend" description="Run Emma to get code coverage">
                <property name="test.file" value="" />
                <emmajava enabled="true" libclasspathref="emma.lib"
                        classname="Test"
                        classpathref="test.classpath"
                        sort="+class,+method,+name,+block"
                        metrics="method:100,block:90,line:80,class:100"
                >
                        <arg value="${test.lua.output.dir}" />
                        <arg value="${test.file}" />

                        <filter includes="se.krka.kahlua.*" />
                        <sourcepath>
                                <dirset dir="${basedir}/src" />
                        </sourcepath>
                        <txt outfile="${test.emma.coverage.dir}/coverage.txt" />
                        <xml outfile="${test.emma.coverage.dir}/coverage.xml" />
                        <html outfile="${test.emma.coverage.dir}/coverage.html"  />
                </emmajava>
        </target>

        <target name="javadoc" description="Generate javadoc">
                <javadoc 
                                sourcepath="${src.dir}"
                                destdir="${build.dir}/javadoc"
                />
        </target>
</project>
